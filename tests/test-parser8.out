tree <char>e(1);
char d;
float c;
tree <float>b(3);
int a;
int main()
{
tree <float>g(3);
tree <char>k(2);
int l;
char m;
bool s;
bool t;
tree <char>v(1);
tree <char>z(2);
int y;
l = 2;
a = 4;
while (l < a) {
inc(l);
break;}
y = -1;
print(a mod 3);
g = 1.1[2.1, 2.2[2.21, 2.22, 2.23], 2.3[2.31, 2.32]];
k = 'z'['x', 'y'['b', 'a']];
print(capitalize_letter_a(k % 1 % 1));
change_letter_to_q(k % 1 % 1);
print(k % 1 % 1@);
change_first_child_letter_to_p(k);
print(k);
print(t = !s || false && true);
print_for_me_please("hello");
v = "hello";
capitalize_all_of_me(v);
print(v);
z = k + 'm'['n', 'o'];
z % 1--;
z = 'm'['n', 'o']--;
z = 'm'['n', 'o'] % 0--;
for (l = 0 ; l < 42 ; l = l + 1) {
print(l);
}
a = b = c;
z % 0 % 3@ = 4;
a = z % 0;
t % 0 = t2;
t % 0 = t3 % 0;
t % 0@ = 3;
t % z@ = 4;
normal_int = t % 0@;
t@ = 4;
t % 0 % 1@ = 5;
t3 = t % 0 % 1--;
t % toyfunc() % 3-- = t2;
}

int capitalize_all_of_me(tree <char>s(1))
{
tree <char>tmp(1);
tmp = s;
while (tmp % 0 != null) {
if (tmp@ < 'z')
{
tmp@ = tmp@ + 'A' - 'a';
}
tmp = tmp % 0;
}
return 0;
}

int print_for_me_please(tree <char>s(1))
{
print(s + "\n");
}

int change_letter_to_q(tree <char>n(2))
{
n@ = 'q';
return 0;
}

int change_first_child_letter_to_p(tree <char>r(2))
{
r % 1 - 1@ = 'w';
r % 0@ = 'p';
return 0;
}

char capitalize_letter_a(char a)
{
if (a == 'a')
{
return 'A';
}
return '0';
}

int inc(int x)
{
return x + 1;
}